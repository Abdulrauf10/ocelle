fragment UserDetails on User {
  id
  email
  firstName
  lastName
  metadata {
    key
    value
  }
  avatar {
    url
    alt
  }
}

fragment UserAddress on Address {
  id
  metadata {
    key
    value
  }
  firstName
  lastName
  streetAddress1
  streetAddress2
  city
  countryArea
  country {
    code
    country
  }
}

fragment UserError on AccountError {
  field
  message
  code
  addressType
}

mutation RegisterAccount($input: AccountRegisterInput!) {
  accountRegister(input: $input) {
    requiresConfirmation
    errors {
      ...UserError
    }
    user {
      id
    }
  }
}

mutation UpdateUser($id: ID!, $firstName: String!, $lastName: String!, $email: String!) {
  customerUpdate(id: $id, input: { firstName: $firstName, lastName: $lastName, email: $email }) {
    errors {
      ...UserError
    }
  }
}

mutation ChangePassword($oldPassword: String!, $newPassword: String!) {
  passwordChange(oldPassword: $oldPassword, newPassword: $newPassword) {
    errors {
      ...UserError
    }
  }
}

mutation ConfirmAccount($email: String!, $token: String!) {
  confirmAccount(email: $email, token: $token) {
    errors {
      ...UserError
    }
    user {
      id
    }
  }
}

query GetCurrentUser {
  me {
    ...UserDetails
  }
}

query GetCurrentUserFullSize {
  me {
    ...UserDetails
    defaultBillingAddress {
      ...UserAddress
    }
    defaultShippingAddress {
      ...UserAddress
    }
  }
}

query CurrentUserOrderList {
  me {
    ...UserDetails
    orders(first: 10) {
      edges {
        node {
          ...Order
        }
      }
    }
  }
}

mutation RequestPasswordReset($email: String!, $redirectUrl: String!) {
  requestPasswordReset(email: $email, redirectUrl: $redirectUrl) {
    errors {
      ...UserError
    }
  }
}

query FindUser($email: String!) {
  user(email: $email) {
    ...UserDetails
  }
}

query GetAddresses {
  me {
    defaultShippingAddress {
      ...UserAddress
    }
    defaultBillingAddress {
      ...UserAddress
    }
  }
}

mutation CreateAddress(
  $id: ID!
  $firstName: String!
  $lastName: String!
  $streetAddress1: String!
  $streetAddress2: String!
  $city: String!
  $countryArea: String!
) {
  addressCreate(
    userId: $id
    input: {
      firstName: $firstName
      lastName: $lastName
      streetAddress1: $streetAddress1
      streetAddress2: $streetAddress2
      city: $city
      countryArea: $countryArea
      country: HK
    }
  ) {
    errors {
      ...UserError
    }
    address {
      ...UserAddress
    }
  }
}

mutation SetDefaultAddress($id: ID!, $shippingAddressId: ID!, $billingAddressId: ID!) {
  shippingAddressSetDefault: addressSetDefault(
    userId: $id
    type: SHIPPING
    addressId: $shippingAddressId
  ) {
    errors {
      ...UserError
    }
  }
  billingAddressSetDefault: addressSetDefault(
    userId: $id
    type: BILLING
    addressId: $billingAddressId
  ) {
    errors {
      ...UserError
    }
  }
}

mutation UpdateSelfAddress(
  $id: ID!
  $firstName: String!
  $lastName: String!
  $streetAddress1: String!
  $streetAddress2: String!
  $city: String!
  $countryArea: String!
) {
  accountAddressUpdate(
    id: $id
    input: {
      firstName: $firstName
      lastName: $lastName
      streetAddress1: $streetAddress1
      streetAddress2: $streetAddress2
      city: $city
      countryArea: $countryArea
      country: HK
    }
  ) {
    errors {
      ...UserError
    }
  }
}

query addressValidationRules($countryArea: String!) {
  addressValidationRules(countryCode: HK, countryArea: $countryArea) {
    addressFormat
    allowedFields
    requiredFields
    countryAreaType
    postalCodeType
    cityType
    cityChoices {
      raw
      verbose
    }
    countryAreaChoices {
      raw
      verbose
    }
  }
}
