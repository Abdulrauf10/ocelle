fragment ProductType on ProductType {
  id
  name
  slug
  isShippingRequired
  isDigital
}

fragment Category on Category {
  id
  name
}

fragment ProductVariant on ProductVariant {
  id
  name
  sku
  quantityAvailable
  pricing {
    price {
      gross {
        currency
        amount
      }
    }
  }
}

fragment Product on Product {
  id
  name
  slug
  description
  seoTitle
  seoDescription
  thumbnail(size: 1024, format: WEBP) {
    url
    alt
  }
  category {
    id
    name
  }
  variants {
    ...ProductVariant
  }
  pricing {
    priceRange {
      start {
        gross {
          amount
          currency
        }
      }
      stop {
        gross {
          amount
          currency
        }
      }
    }
  }
}

query FindProductTypes($keyword: String!) {
  productTypes(filter: { search: $keyword }, first: 10) {
    edges {
      node {
        ...ProductType
      }
    }
  }
}

mutation CreateProductType($name: String!) {
  productTypeCreate(input: { name: $name }) {
    errors {
      code
      message
    }
    productType {
      ...ProductType
    }
  }
}

mutation DeleteProductType($id: ID!) {
  productTypeDelete(id: $id) {
    errors {
      field
      message
      code
    }
  }
}

query FindProductCategory($slug: String!) {
  category(slug: $slug) {
    ...Category
  }
}

mutation CreateProductCategory($name: String!, $slug: String!) {
  categoryCreate(input: { name: $name, slug: $slug }) {
    errors {
      code
      message
    }
    category {
      ...Category
    }
  }
}

mutation DeleteProductCategory($id: ID!) {
  categoryDelete(id: $id) {
    errors {
      field
      message
      code
    }
  }
}

query FindProducts($where: ProductWhereInput, $filter: ProductFilterInput) {
  products(where: $where, filter: $filter, first: 100) {
    edges {
      node {
        ...Product
      }
    }
    totalCount
  }
}

query FindProduct($slug: String!) {
  product(slug: $slug) {
    ...Product
  }
}

mutation CreateProducts($products: [ProductBulkCreateInput!]!) {
  productBulkCreate(products: $products) {
    errors {
      code
      message
    }
    results {
      product {
        ...Product
      }
    }
  }
}

mutation UpdateProductChannelListing($productId: ID!, $channels: [ProductChannelListingAddInput!]) {
  productChannelListingUpdate(id: $productId, input: { updateChannels: $channels }) {
    errors {
      code
      message
    }
  }
}

mutation CreateProductVariants($productId: ID!, $variants: [ProductVariantBulkCreateInput!]!) {
  productVariantBulkCreate(product: $productId, variants: $variants) {
    errors {
      code
      message
    }
  }
}
