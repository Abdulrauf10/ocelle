fragment OrderLine on OrderLine {
  variant {
    id
    sku
    product {
      ...Product
    }
  }
  quantity
  totalPrice {
    gross {
      ...Money
    }
  }
}

fragment OrderDiscount on OrderDiscount {
  id
  type
  valueType
  value
  reason
  amount {
    ...Money
  }
}

fragment Order on Order {
  id
  userEmail
  number
  created
  shippingAddress {
    ...UserAddress
  }
  billingAddress {
    ...UserAddress
  }
  paymentStatus
  authorizeStatus
  chargeStatus
  isShippingRequired
  user {
    id
    email
  }
  shippingMethods {
    ...ShippingMethod
  }
  discounts {
    ...OrderDiscount
  }
  shippingPrice {
    ...TaxedMoney
  }
  undiscountedTotal {
    ...TaxedMoney
  }
  total {
    gross {
      ...Money
    }
  }
  lines {
    ...OrderLine
  }
  transactions {
    ...TransactionItem
  }
}

mutation CreateDraftOrder($input: DraftOrderCreateInput!) {
  draftOrderCreate(input: $input) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

mutation UpdateDraftOrder($id: ID!, $input: DraftOrderInput!) {
  draftOrderUpdate(id: $id, input: $input) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

mutation CancelDraftOrder($id: ID!) {
  orderCancel(id: $id) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

mutation DeleteDraftOrder($id: ID!) {
  draftOrderDelete(id: $id) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

mutation CompleteDraftOrder($id: ID!) {
  draftOrderComplete(id: $id) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

mutation AddOrderDiscount($id: ID!, $input: OrderDiscountCommonInput!) {
  orderDiscountAdd(orderId: $id, input: $input) {
    errors {
      field
      message
      code
    }
    order {
      ...Order
    }
  }
}

query GetOrder($id: ID!) {
  order(id: $id) {
    ...Order
  }
}

query FindOrders($channel: String, $filter: OrderFilterInput) {
  orders(filter: $filter, channel: $channel, first: 50) {
    totalCount
    edges {
      node {
        ...Order
      }
    }
  }
}
